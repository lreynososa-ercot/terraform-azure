name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy (dev, prod, etc.)'
        required: true
        type: choice
        options:
          - dev
        default: 'dev'
      confirmation:
        description: 'Select DESTROY-{environment} to confirm (e.g., DESTROY-dev)'
        required: true
        type: choice
        options:
          - DESTROY-dev
        default: 'DESTROY-dev'

permissions:
  id-token: write
  contents: read
  pull-requests: read

env:
  TERRAFORM_VERSION: "1.7.0"
  ARM_USE_OIDC: true
  TF_WORKSPACE: "dev"
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
  TF_VAR_storage_account_name: ${{ secrets.STORAGE_ACCOUNT_NAME }}
  TF_VAR_container_name: ${{ secrets.CONTAINER_NAME }}

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Validate Confirmation
      run: |
        EXPECTED="DESTROY-${{ github.event.inputs.environment }}"
        RECEIVED="${{ github.event.inputs.confirmation }}"
        if [ "$EXPECTED" != "$RECEIVED" ]; then
          echo "Error: Confirmation text does not match. Expected '$EXPECTED' but got '$RECEIVED'"
          exit 1
        fi

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    # Cache PowerShell modules
    - name: Cache PowerShell modules
      id: cache-psmodules
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/powershell/Modules
          ~/PowerShellModules
        key: psmodules-${{ runner.os }}-${{ hashFiles('**/*.ps1') }}
        restore-keys: |
          psmodules-${{ runner.os }}-

    - name: Setup PowerShell modules
      if: steps.cache-psmodules.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Install-Module -Name Az.Storage -Force -AllowClobber -Scope CurrentUser
        Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser

    - name: Check and Remove State Lock
      shell: pwsh
      run: |
        $env = "${{ env.TF_WORKSPACE }}"
        $storageAccount = Get-AzStorageAccount -ResourceGroupName "rg-terraform-backend" -Name "tfstategp2ej81f"
        $ctx = $storageAccount.Context
        $stateFile = "${env}.terraform.tfstate"
        
        Write-Host "Checking state lock for $stateFile..."
        try {
            $blob = Get-AzStorageBlob -Container "container-tfstate" -Blob $stateFile -Context $ctx -ErrorAction Stop
            if ($blob.ICloudBlob.Properties.LeaseState -eq "Leased") {
                Write-Host "State file is locked. Breaking the lease..."
                $blob.ICloudBlob.BreakLease()
                Write-Host "Successfully broke the lease on the state file."
            } else {
                Write-Host "No active lease found on the state file."
            }
        } catch {
            Write-Host "State file not found or other error. This might be first deployment."
        }

    # Cache Terraform
    - name: Setup Terraform with cache
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
      env:
        ARM_USE_OIDC: true        
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
        TF_VAR_storage_account_name: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        TF_VAR_container_name: ${{ secrets.CONTAINER_NAME }}

    # Cache Terraform plugins and modules
    - name: Cache Terraform plugins and modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          **/.terraform
        key: terraform-${{ runner.os }}-${{ env.TERRAFORM_VERSION }}-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          terraform-${{ runner.os }}-${{ env.TERRAFORM_VERSION }}-

    # Configure Terraform plugin cache directory
    - name: Configure Terraform plugin cache
      run: |
        mkdir -p ~/.terraform.d/plugin-cache
        echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

    - name: Terraform Init
      working-directory: environments/${{ env.TF_WORKSPACE }}      
      env:
        ARM_USE_OIDC: true        
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        ARM_CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: |
        echo "Cleaning up any existing Terraform files..."
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        terraform init

    - name: Terraform Plan Destroy
      working-directory: environments/${{ env.TF_WORKSPACE }}
      env:
        ARM_USE_OIDC: true        
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        ARM_CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: terraform plan -destroy -out=tfdestroyplan

    - name: Pause for Review
      run: |
        echo "⚠️ DESTRUCTION PLAN GENERATED ⚠️"
        echo "Review the plan above carefully before proceeding."
        echo "Waiting for 30 seconds before destruction..."
        sleep 30

    - name: Terraform Destroy
      working-directory: environments/${{ env.TF_WORKSPACE }}
      env:
        ARM_USE_OIDC: true        
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        ARM_CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: terraform apply -auto-approve tfdestroyplan 